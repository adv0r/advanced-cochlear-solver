% BVP4C  選点法により ODE に対する境界値問題の解法
% 
% SOL = BVP4C('F','G',SOLINIT) は、一般的な 2 点境界条件 bc(y(a),y(b)) = 0
% による制約の基で、区間 [a,b] で、常微分方程式 y' = F(x,y) を積分します。
% ODEFUN と BCFUN は関数ハンドルです。スカラ X と列ベクトル Y に対して、
% ODEFUN(X,Y) は、f(x,y) を表わす列ベクトルを出力しなければなりません。
% 列ベクトル YA と YB に対して、BCFUN(YA,YB) は、bc(y(a),y(b)) を表わす
% 列ベクトルを出力しなければなりません。SOLINITは、つぎのフィールドをもつ
% 構造体です。
% 
%    x -- SOLINIT.x(1) = a、SOLINIT.x(end) = b をもつ初期メッシュの順序
%         付けられた節点
%    y -- 節点 SOLINIT.x(i) での解と y(x(i)) に対する推定 SOLINIT.y(:,i) を
%         もつ解に対する初期推定
% 
% BVP4C は、区間[a,b]で連続で、その区間での1階微分が連続の解をもちます。
% 解は、BVP4C の出力 SOL と関数 BVPVAL を使って、点 XINT で計算されます。
% YINT = BVPVAL(SOL,XINT) となります。出力 SOL は、つぎのフィールドをも
% つ構造体です。
% 
%    SOL.x  -- BVP4C で選択されるメッシュ
%    SOL.y  -- SOL.x のメッシュ点での y(x) への近似
%    SOL.yp -- SOL.x のメッシュ点での y'(x) への近似
%    SOL.solver -- 'bvp4c'
%
% SOL = BVP4C(ODEFUN,BCFUN,SOLINIT,OPTIONS) は、デフォルトパラメータを 
% 関数 BVPSET で作成された構造体 OPTIONS の中の値と置き換えて、上述した
% 問題を解きます。実行時間を大幅に削減するには、OPTIONS パラメータを
% 使って、関数に ヤコビアンを与えたり、ODEFUN をベクトル化してください。
% 詳細は、BVPSET を参照してください。また、上記の 2 つの方法を実行する
% 例については、SHOCKBVP を参照してください。
%   
% いくつかの境界値問題は、y(x) と共に計算される未知のパラメータベクトル 
% p を含んでいます。
% 
%       y' = f(x,y,p)
%       0  = bc(y(a),y(b),p) 
% 
% このような問題に対して、フィールド SOLINIT.parameters が、未知パラメータ
% の推定を与えるために使われます。出力としては、求まったパラメータが、
% フィールド SOL.parameters に出力されます。あるパラメータ値の組を使って
% 解いた問題の解 SOL は、他のパラメータに対しては、SOLINIT として使うこと
% ができます。難しい BVP は、連続的に解くことができる場合があります。
% すなわち、解を得ることが可能なパラメータ値を使って開始し、解を求め、
% 最終的に求めたいものに近いパラメータを使った計算の推定値として、最初の
% 解を使います。ユーザが希望するパラメータに対して、BVP が解けるまで、
% 繰り返し計算を行います。
%
% 関数 BVPINIT は、多くの一般的な状況で、推定に必要な構造体を作成します。
% SOLINIT = BVPINIT(X,YINIT) は、SILINIT.x で記述される初期メッシュ X に
% 対する推定と、解に対する定数ベクトルか、関数ハンドルのいずれかである 
% YINIT の形式です。スカラ X に対して、YINIT が関数ハンドルの場合、
% YINIT(X) は、[a,b] 内の点における解の推定となる列ベクトルを出力しなければ
% なりません。問題が未知パラメータを呼び出す場合、
% SOLINIT = BVPINIT(X,YINIT,PARAMS) は、未知パラメータに対する推定のベクトル 
% PARAMS もつ形式になります。
% 
% BVP4C は、つぎの形式の未知のパラメータ p をもつ問題を含む、特異なクラスの
% BVP を解きます。
%       y' = S*y/x + f(x,y,p)
%       0  = bc(y(0),y(b),p) 
% 区間は、[0, b] で、b > 0 である必要があります。 
% このような問題は、円筒形または球形の対称性のため、PDE の結果である 
% ODE のスムーズな解の計算のときに発生することがあります。特異な問題に
% 対して、(定数) 行列 S は、BVPSET の 'SingularTerm' オプションの値として
% 指定され、ODEFUN は f(x,y,p) のみを実行します。境界条件は、必要条件 
% S*y(0) = 0 と一致する必要があり、初期推定は、この条件を満足する必要が
% あります。
%
% BVP4C は、多点境界値問題を解くことができます。そのような問題の場合、
% 区間 [a,b] 内でいくつかの境界条件があります。 一般にこれらの点は、
% インタフェースを表わし、[a,b] の領域への自然な分割を与えます。
% BVP4C は、左から右 (a から b) に領域を 1 からはじまるインデックスで
% 数えます。領域 k では、BVP4C は、導関数を YP = ODEFUN(X,Y,K) と評価
% します。境界条件の関数 BCFUN(YLEFT,YRIGHT) では、 YLEFT(:,K) は、
% 領域 k 'left' の境界での解であり、YRIGHT(:,K) についても同様です。
% 初期推定が BVPINIT(XINIT,YINIT) で作成される場合、XINIT は、各境界点に
% 対して、double の要素をもつ必要があります。YINIT が関数ハンドルの場合、
% BVPINIT は、領域 k の X での解に対する初期推定を得るために、Y = YINIT(X,K) 
% を呼び出します。BVP4C で出力される解の構造体 SOL の SOL.x は、各境界点に
% 対して、double の要素をもちます。SOL.y の対応する列は、境界での 
% 'left' および 'right' の解をそれぞれ含みます。3 点境界値問題を解く例
% については、THREEBVP を参照してください。
%
% 例
%         solinit = bvpinit([0 1 2 3 4],[1 0]);
%         sol = bvp4c(@twoode,@twobc,solinit);
%
% は、微分方程式と境界値、区間 [0, 4] で、それぞれ関数 twoode と twobc で
% 計算した微分方程式と境界条件で境界値問題を解きます。この例は、初期
% メッシュとして、[0 1 2 3 4] を使い、メッシュ点での解要素の初期近似として、
% [1 0] を使います。
% 
%         xint = linspace(0,4);
%         yint = bvpval(sol,xint);
% 
% は、区間 [0,4] で、等間隔に 100 区分された点で解を計算します。解の
% 最初の成分は、つぎのステートメントでプロットされます。
% 
%         plot(xint,yint(1,:));
% 
% 他の例は、TWOBVP, FSBVP, SHOCKBVP, MAT4BVP, EMDENBVP, THREEBVP を
% 参照してください。   
%
% 参考 BVPSET, BVPGET, BVPINIT, DEVAL, FUNCTION_HANDLE.


%   Copyright 1984-2006 The MathWorks, Inc.
